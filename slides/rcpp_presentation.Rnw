% this is based on the template found at:
% https://github.com/yihui/knitr/blob/master/inst/examples/knitr-beamer.Rnw
\documentclass{beamer}
\usepackage{moreverb}
\begin{document}
<<setup, include=FALSE>>=
# smaller font size for chunks
opts_chunk$set(size = 'footnotesize')
@
\title{Speeding up R with Rcpp}
\author{Stephen Cristiano \\ Department of Biostatistics \\ Johns Hopkins University}

\maketitle

% very important to use option [fragile] for frames containing code output!

\begin{frame}[fragile]{What is Rcpp?}
    \vspace{0.5em}
    \begin{itemize}\itemsep1em
        \item Rcpp: Seamless integration between R and C++.
        \item Extremely simple to connect C++ with R.
        \item Maintained by Dirk Eddelbuetter and Romain Francois
    \end{itemize}
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Simple examples}
<<simple-square, tidy=FALSE>>=
library('Rcpp')
cppFunction('int square(int x) { return x*x; }')
square(7L)

cppFunction('
            int add(int x, int y, int z) {
                int sum = x + y + z;
                return sum;
            }'
            )
add(1, 2, 3)
@
\end{frame}

\begin{frame}[fragile]{Everything revolves around .Call}
C++ Level:
\begin{verbatimtab}
SEXP foo(SEXP a, SEXP b, SEXP C, ...);
\end{verbatimtab}
R Level:
<<callexample-R, tidy=FALSE, eval=FALSE>>=
res <- .Call("foo", a, b, C, ..., package="mypkg")
@
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Why C++?}
    \vspace{1em}
    \begin{itemize}\itemsep1em
        \item One of the most frequently used programming languages. Easy to
            find help.
        \item Speed.
        \item Good chance what you want is already implemented in C++.
        \item From wikipedia: `C++ is a statically typed, free-form, multi-paradigm, 
            compiled, general-purpose, powerful programming language.'
    \end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Why not C++?}
    \vspace{1em}
    \begin{itemize}\itemsep1em
        \item More difficult to debug.
        \item more difficult to modify.
        \item The population of potentials users who understand both R and
            C++ is smaller.
    \end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Why Rcpp}
    \vspace{1em}
    \begin{itemize}\itemsep1em
        \item Easy to use (honest).
        \item Clean and approachable API that enable for high performance
            code.
        \item R style vectorized code at C++ level.
        \item Programmer time vs computer time: much more efficient code that
            does not take much longer to write.
        \item Enables access to advanced data structures and algorithms
            implented in C++ but not provided by R.
        \item Handles garbage collection and the Rcpp programmer should never
            have to worry about memory allocation and deallocation.
    \end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{C++ in 2 minutes}
<<c++, tidy=FALSE, eval=FALSE>>=
cppFunction('
  double sumC(NumericVector x) {
    int n = x.size();
    double total = 0;
    for(int i = 0; i < n; ++i) {
      total += x[i];
    if(total > 100)
    break;
    }
    return total;
  }
')
sumC(seq(1:10))
@
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{}
    \vspace{0.5em}
    \begin{itemize}\itemsep1em
        \item Need to initialize your variables with data type.
        \item for loops of structure for(initialization; condition; increment).
        \item conditionals are the same as R.
        \item End every statement with a semicolon.
        \item Vectors and arrays are 0-indexed.
        \item size() is a member function on the vector class - x.size()
            returns the size of x.
        \item While C++ can be a very complex language, just knowing these
            will enable you to write faster R functions.
    \end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Typical bottlenecks in R}
    \vspace{0.5em}
    \begin{itemize}\itemsep1em
        \item Loops that depend on previous iterations, eg MCMC methods.
        \item Function calls in R slow, but very little overhead in C++.
            Recursive functions are very inefficient in R.
        \item Not having access to advanced data structures algorithms in R
             but available in C++.
    \end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{When to use Rcpp}
    \vspace{0.5em}
    \begin{itemize}\itemsep1em
        \item Sometimes the solution is to become a better R coder.
        \item Before writing C++ code, you should first ask if it's necessary.
        \item Take advantage of vectorization when possible.
        \item Most base R functions already call C functions. Make sure there
            isn't already an efficient implementation of what you are trying
            to do.
    \end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Data Structures}
    \vspace{0.5em}
    \begin{itemize}\itemsep1em
        \item All R objects are internally represented by a SEXP: a pointer
            to an S expression object.
        \item Any R object can be passed down to C++ code: vectors, matrices
            lists. Even functions and environments.
        \item A large number of user-visible classes for R objects, which
            contain pointers the the SEXP object.
            \begin{itemize}
                \item IntegerVector
                \item NumericVector
                \item LogicalVector
                \item CharacterVector
                \item NumericMatrix
                \item S4
                \item and many more
            \end{itemize}
    \end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Rcpp Sugar}
    \vspace{0.5em}
    \begin{itemize}\itemsep1em
        \item Rcpp sugar brings a higher level of abstraction to C++ code
            written in Rcpp.
        \item Avoid C++ loops with code that strongly resembles R.
        \item Takes advantage of operator overloading.
        \item Despite the similar syntax, peformance is much faster in C++,
            though not quite as fast as manually optimized C++ code.
    \end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Example}
<<RcppSugar, tidy=FALSE>>=
pdistR <- function(x, ys) {
    (x - ys)^2
}

cppFunction('NumericVector pdistC2(double x, NumericVector ys) {
            return pow((x-ys), 2);
}'
)
pdistR(5.0, c(4.1,-9.3,0, 13.7))
pdistC2(5.0, c(4.1,-9.3,0, 13.7))
@
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Logical Operators}
    \begin{verbatimtab}
    // two integer vectors of the same size
    NumericVector x;
    NumericVector y;

    // expressions involving two vectors
    LogicalVector res = x < y;
    LogicalVector res = x != y;

    // one vector, one single value
    LogicalVector res = x < 2;

    // two expressions
    LogicalVector res = (x + y) == (x*x);

    // functions producing single boolean result
    all(x*x < 3);
    any(x*x < 3);

    \end{verbatimtab}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Logical Operators}
    There are many functions similar to what exists inside R
    \begin{verbatimtab}
    is_na(x);
    seq_along(x);
    sapply( seq_len(10), square<int>() );
    ifelse( x < y, x, (x+y)*y );
    pmin( x, x*x);
    diff( xx );
    intersect( xx, yy); //returns interserct of two vectors
    unique( xx ); // subset of unique values in input vector

    // math functions
    abs(x); exp(x); log(x); ceil(x);
    sqrt(x); sin(x); gamma(x);
    range(x);
    mean(x); sd(x); var(x);
    which_min(x); which_max(x);
    // A bunch more

    \end{verbatimtab}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Density and random number generation functions}
    Rcpp has access to the same density, distribution, and RNG functions
    used by R itself. For example, you can draw from a gamma distribution with
    scale and shape parameters equal to 1 with:
<<Gamma, tidy=FALSE>>=
cppFunction('NumericVector getRGamma() {
            RNGScope scope;
            NumericVector x = rgamma( 10, 1, 1 );
            return x;
}'
)
getRGamma()
@
\end{frame}
\begin{frame}[fragile]{RcppArmadillo}
    \vspace{0.5em}
    \begin{itemize}\itemsep1em
        \item Armadillo is a high level and easy to use C++ linear algebra
            library with syntax similar to Matlab.
        \item RcppArmadillo is an Rcpp interface allowing access to the
            Armadillo library.
    \end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Be careful with pointers!}
<<pointer, tidy=FALSE>>=
library(inline, quietly=TRUE)
src <- '
    Rcpp::NumericVector invec(vx);
    Rcpp::NumericVector outvec(vx);
    for(int i=0; i<invec.size(); i++) {
        outvec[i] = log(invec[i]);
    }
    return outvec;
'
fun <- cxxfunction(signature(vx="numeric"), src, plugin="Rcpp")
x <- seq(1.0, 3.0, by=1)
cbind(x, fun(x))
@
Note: outvec and invec point to the same underlying R object.
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Use clone to not modify original vector.}
<<pointer-fixed, tidy=FALSE>>=
src <- '
    Rcpp::NumericVector invec(vx);
    Rcpp::NumericVector outvec = Rcpp::clone(vx);
    for(int i=0; i<invec.size(); i++) {
        outvec[i] = log(invec[i]);
    }
    return outvec;
'
fun <- cxxfunction(signature(vx="numeric"), src, plugin="Rcpp")
x <- seq(1.0, 3.0, by=1)
cbind(x, fun(x))
@
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Creating R packages}
    \vspace{0.5em}
    Inspection of R source code for any R package will reveal the directories::
    \begin{itemize}\itemsep1em
        \item R: for R functions
        \item vignettes: \LaTeX papers weaving R code and indicating the
            intended workflow of an analysis.
        \item man: documentation for exported R functions.
        \item src: compiled code
    \end{itemize}
The file \verb|DESCRIPTION| provides a brief description of the project, a version
number, and any packages for which your package depends.
\end{frame}
\begin{frame}[fragile]{Creating R packages}
    \vspace{0.5em}
    \begin{itemize}\itemsep1em
        \item All compiled code coes in package/src directory.
        \item Code in src/ will be automatically compiled and shared libraries
            created when building the package.
        \item Instantiate an Rcpp package: Rcpp.package.skeleton

    \end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{S4 objects with Rcpp}
<<s4, tidy=FALSE>>=
src <- '
S4 foo(x) ; foo.slot(".Data") = "bar" ; foo.slot("x")=100; return(foo);
'
fun <- cxxfunction(signature(x="any"), src,
                   plugin="Rcpp")
setClass( "S4ex", contains = "character",
         representation( x = "numeric" ) )
x <- new( "S4ex", "bla", x = 10 )
fun(x)
str(fun(x))
@
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Case study}
    \vspace{0.5em}
Example: Gibbs sampler to find posterior distributions for parameters in
mixture of Skew Normal distributions of the form:
\begin{align}
    \sum_{k=1}^{K} \pi_k f_{SN}(y; \xi_k, \omega_k^2, \alpha_k)
\end{align}
where
\begin{align}
    f_{SN}(y; \xi, \omega^2, \alpha) = \frac{2}{\omega} \phi\left( \frac{y - \xi}{\omega}\right) \Phi(\alpha \omega^{-1}(y - \xi))
\end{align}
See Fr{\"u}wirth-Schnatter, Pyne (2010) for details on how to derive the full conditionals.
\par
{\tt github.com/scristia/ComputingClubRcpp} for Rcpp implementation.
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Resources}
    \vspace{0.5em}
    \begin{itemize}\itemsep1em
        \item {\tt vignette("Rcpp-quickref")}
        \item 'Seamless R and C++ integration with Rcpp' by Dirk Eddelbuettel.
            Excellent book for learning Rcpp. Available for free through
            JHU library.
        \item Hadley Wickham's Rcpp tutorial:
            http://adv-r.had.co.nz/Rcpp.html
        \item A huge number of examples at http://gallery.rcpp.org
        \item Stack exchange.
    \end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\end{document}
